/************************************************************************/
/*																		*/
/*	display_demo.c	--	Arty Z7-20 Display demonstration  				*/
/*																		*/
/************************************************************************/
/*	Author: Sam Bobrowicz												*/
/*	Copyright 2016, Digilent Inc.										*/
/************************************************************************/
/*  Module Description: 												*/
/*																		*/
/*		This file contains code for running a demonstration of the		*/
/*		HDMI output capabilities on the ZYBO. It is a good	            */
/*		example of how to properly use the display_ctrl drivers.	    */
/*																		*/
/************************************************************************/
/*  Revision History:													*/
/* 																		*/
/*		2/5/2016(SamB): Created											*/
/*		2/10/2017(MonicaI): Updated name for Arty Z7-20 board			*/
/*																		*/
/************************************************************************/

/* ------------------------------------------------------------ */
/*				Include File Definitions						*/
/* ------------------------------------------------------------ */

#include "display_demo.h"
#include "display_ctrl/display_ctrl.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xparameters.h"
#include "xspi.h"
#include "xiicps.h"

#define IIC_DEVICE_ID		XPAR_XIICPS_0_DEVICE_ID
#define SPI_DEVICE_ID		XPAR_XQSPIPS_0_DEVICE_ID
#define DYNCLK_BASEADDR 	XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID 		XPAR_AXIVDMA_0_DEVICE_ID
#define DISP_VTC_ID 		XPAR_VTC_0_DEVICE_ID
#define VID_VTC_IRPT_ID 	XPS_FPGA3_INT_ID
#define VID_GPIO_IRPT_ID 	XPS_FPGA4_INT_ID
#define SCU_TIMER_ID 		XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR 		XPAR_PS7_UART_0_BASEADDR
#define IIC_SLAVE_ADDR		0x2A
#define IIC_SCLK_RATE		100000
#define TEST_BUFFER_SIZE	512
#define data				164 //bytes
#define loop				60 // 60 lines


/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * Display Driver structs
 */
DisplayCtrl dispCtrl;
XAxiVdma vdma;

/*
 * Framebuffers for video data
 */
u8 frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME];
u8 *pFrames[DISPLAY_NUM_FRAMES];     //array of pointers to the frame buffers
u8 SendBuffer[TEST_BUFFER_SIZE];    //I2C TX
u8 RecvBuffer[TEST_BUFFER_SIZE];    //I2C RX

/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */
int IicPsMasterPolledExample(u16 DeviceId, u16 SpiDeviceId,u8 *frame, u32 width, u32 height, u32 stride);

int main(void)
{

	DemoInitialize();
	DisplayStop(&dispCtrl);
	DisplaySetMode(&dispCtrl, &VMODE_640x480);
	DisplayStart(&dispCtrl);
	//fResSet = 1;
	IicPsMasterPolledExample(IIC_DEVICE_ID, SPI_DEVICE_ID,pFrames[dispCtrl.curFrame], dispCtrl.vMode.width, dispCtrl.vMode.height, DEMO_STRIDE );
	//DemoRun();

	return 0;
}


void DemoInitialize()
{
	int Status;
	XAxiVdma_Config *vdmaConfig;
	int i;

	/*
	 * Initialize an array of pointers to the 3 frame buffers
	 */
	for (i = 0; i < DISPLAY_NUM_FRAMES; i++)
	{
		pFrames[i] = frameBuf[i];
	}

	/*
	 * Initialize a timer used for a simple delay
	 */
	TimerInitialize(SCU_TIMER_ID);

	/*
	 * Initialize VDMA driver
	 */
	vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
	if (!vdmaConfig)
	{
		xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (Status != XST_SUCCESS)
	{
		xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Display controller and start it
	 */
	Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR, pFrames, DEMO_STRIDE);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}
	Status = DisplayStart(&dispCtrl);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
		return;
	}

	//DemoPrintTest(dispCtrl.framePtr[dispCtrl.curFrame], dispCtrl.vMode.width, dispCtrl.vMode.height, dispCtrl.stride, DEMO_PATTERN_1);

	return;
}


int IicPsMasterPolledExample(u16 DeviceId, u16 SpiDeviceId,u8 *frame, u32 width, u32 height, u32 stride)
{
	int Status,i,segment,x,y,iPixelAddr;
	XIicPs_Config *Config;
	XSpi_Config *SpiConfig;
	u8 Buffer[data];
	u8 Image[loop][data];
	XSpi SpiInstancePtr;
	XIicPs Iic;
	//int lost_frame_counter = 0;
	//int Index;


	/*
	 * Initialize the IIC driver so that it's ready to use
	 * Look up the configuration in the config table,
	 * then initialize it.
	 */
	Config = XIicPs_LookupConfig(DeviceId);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test to ensure that the hardware was built correctly.
	 */
	Status = XIicPs_SelfTest(&Iic);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the IIC serial clock rate.
	 */
	XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);

	//SpiConfig = XSpiPs_LookupConfig(SpiDeviceId);
	SpiConfig = XSpi_LookupConfig(SpiDeviceId);
	if (NULL == SpiConfig) {
		return XST_FAILURE;
	}

	//Status = XSpiPs_CfgInitialize(SpiInstancePtr, SpiConfig,SpiConfig->BaseAddress);
	Status = XSpi_CfgInitialize(&SpiInstancePtr, SpiConfig,SpiConfig->BaseAddress);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

	//Status = XSpiPs_SelfTest(SpiInstancePtr);
	Status = XSpi_SelfTest(&SpiInstancePtr);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

	XSpi_SetOptions(&SpiInstancePtr, XSP_MASTER_OPTION | XSP_CLK_ACTIVE_LOW_OPTION
				|XSP_CLK_PHASE_1_OPTION |XSP_MANUAL_SSELECT_OPTION );

	XSpi_Start(&SpiInstancePtr);
	XSpi_IntrGlobalDisable(&SpiInstancePtr);

	//read status
	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x02;
	XIicPs_MasterSendPolled(&Iic, SendBuffer,2, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	//read and op status
	XIicPs_MasterRecvPolled(&Iic, RecvBuffer,2, IIC_SLAVE_ADDR);
	for(i =0; i<16; i++){
	xil_printf("%X ", RecvBuffer[i]);
	}
	xil_printf("\n\r ");
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	// set the AGC to enable
	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x08;
	SendBuffer[2] = 0x00;
	SendBuffer[3] = 0x01;
	XIicPs_MasterSendPolled(&Iic, SendBuffer,
				 4, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x0A;
	SendBuffer[2] = 0x00;
	SendBuffer[3] = 0x00;
	XIicPs_MasterSendPolled(&Iic, SendBuffer,
				 4, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x06;
	SendBuffer[2] = 0x00;
	SendBuffer[3] = 0x02;
	XIicPs_MasterSendPolled(&Iic, SendBuffer,
				 4, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x04;
	SendBuffer[2] = 0x01;
	SendBuffer[3] = 0x01;
	XIicPs_MasterSendPolled(&Iic, SendBuffer,
				 4, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	//set rx buffer to 0
	for(i =0; i<16; i++){
	RecvBuffer[i] =0;
	}

	//read back AGC is enabled command
	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x04;
	SendBuffer[2] = 0x01;
	SendBuffer[3] = 0x00;
	XIicPs_MasterSendPolled(&Iic, SendBuffer,
				 4, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}

	//set rx buffer to 0
	for(i =0; i<16; i++){
	RecvBuffer[i] =0;
	}

	// read back data and display
	XIicPs_MasterRecvPolled(&Iic, RecvBuffer,4, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}
	for(i =0; i<16; i++){
	xil_printf("%X ", RecvBuffer[i]);
	}
	xil_printf("\n\r ");

	//read and output status buffer
	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x02;
	XIicPs_MasterSendPolled(&Iic, SendBuffer,
				 2, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}
	XIicPs_MasterRecvPolled(&Iic, RecvBuffer,2, IIC_SLAVE_ADDR);
	for(i =0; i<16; i++){
	xil_printf("%X ", RecvBuffer[i]);
	}

	//
	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x04;
	SendBuffer[2] = 0x02;
	SendBuffer[3] = 0x42;
	XIicPs_MasterSendPolled(&Iic, SendBuffer,4, IIC_SLAVE_ADDR);
	while (XIicPs_BusIsBusy(&Iic)) {
		/* NOP */
	}
	xil_printf("\n\r ");
	usleep(200000);


while(1){
//read out the image from the Camera module, resynchronising as necessary
for(segment = 0; segment <loop; segment++){
	XSpi_SetSlaveSelect(&SpiInstancePtr,0x01);
	XSpi_Transfer(&SpiInstancePtr, Buffer , Buffer,	data);
	if((Buffer[0] != 0xff)){
		for(i =0; i<data/2; i++){
			//scale to 8 bit as 8 bit op e.g. 8 bit red 8 bit blue 8 bit green we are using only one
			Image[segment][i] = ((Buffer[2*i] << 8 | Buffer[2*i+1])>>8); //should scale to 8 bit
		}
	}
	else {
		segment = 0;
	}

}
//move image to the output buffer
//for(x = 0; x < (80); x++)
//for(x = 0; x < (640); x++)
//		{
//			iPixelAddr = x;
//			for(y = 0; y < 480; y++)
//			//for(y = 0; y < 60; y++)
//			{
//				frame[iPixelAddr] = Image[(y/8)][(x/8)+4];
//				frame[iPixelAddr + 1] = 0;
//				frame[iPixelAddr + 2] = 0;
//				iPixelAddr += stride;
//			}
//		}
//Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
//
//}

int scalex, scaley;
scalex =16;
scaley =12;
for(x = 0; x < (1280); x++) //6201276
		{
			iPixelAddr = x;
			for(y = (0); y < (720); y++) //476 720
			{
				//op = Image[(y/8)][(x/8)+4];
				//pFrames[iPixelAddr] = op;
				//pFrames[iPixelAddr] = Image[(y/8)][(x/8)+4];
				pFrames[iPixelAddr] = (u32) (((Image[(y/scaley)][(x/scalex)+4])<<16)|
											((Image[(y/scaley)][(x/scalex)+4])<<8)|
											((Image[(y/scaley)][(x/scalex)+4])));
				//pFrames[iPixelAddr] =  0xaafdfeff;
				iPixelAddr += (1280);
			}
		}
Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

	return XST_SUCCESS;
}


